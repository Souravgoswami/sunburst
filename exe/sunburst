#!/usr/bin/env ruby
# Frozen_String_Literal: true

$-v = nil
STDOUT.sync = STDIN.sync = true
require 'sunburst'

def help
	puts <<~EOF
		Sunburst lets you run a command for a given time.
		When the time expires, the program will be SIGKILLed.
		Sunburst will then report the total CPU time and last known memory usage
		of the program.

		If no time is specified, it will run until the command exits.

		Arguments:
		\s\s\s\s--time=N\s\s\s\s\s\s\s\s\s\sRun the program for N seconds
		\s\s\s\s-h | --help\s\s\s\s\s\s\sShow this help section
		\s\s\s\s-p | --progress\s\s\sShow realtime stats of the process
		\s\s\s\s--humanize\s\s\s\s\s\s\s\sHuman readable memory units

		Example:
		\s\s\s\ssunburst echo hello world --time=0.05 --humanize
		\s\s\s\ssunburst "echo hello world" --time=0.05 --humanize
		\s\s\s\ssunburst "ruby -e 'while true do end'" --time=3 --humanize
		\s\s\s\ssunburst "ruby -e 'p :Hello'" --time=3
		\s\s\s\ssunburst "while : ; do : ; done" --time=3 --humanize --progress

	EOF

	exit 0
end

def splitter(sub = 8)
	width = Sunburst.win_width
	puts ?\n, ?-.*(width - sub).center(width)
end

def convert_bytes(mem)
	if mem >= 10 ** 12
		"#{"%06.3f" % mem.fdiv(10 ** 12)} TB"
	elsif mem >= 10 ** 9
		"#{"%06.3f" % mem.fdiv(10 ** 9)} GB"
	elsif mem >= 10 ** 6
		"#{"%06.3f" % mem.fdiv(10 ** 6)} MB"
	elsif mem >= 10 ** 3
		"#{"%06.3f" % mem.fdiv(10 ** 3)} KB"
	else
		"#{"%06.3f" % mem} Bytes"
	end
end

help if ARGV.any? { |x| x[/^\-(\-help|h)$/] }

time_arg = ARGV.find { |x| x[/^\-\-time=[0-9]+\.?[0-9]*$/] }
ARGV.delete(time_arg) if time_arg
time = time_arg ? time_arg.split('=')[-1].to_f : nil

_human_readable = ARGV.find { |x| x[/^\-\-humanize$/] }
ARGV.delete(_human_readable) if _human_readable
human_readable = _human_readable

_progress = ARGV.find { |x| x[/^\-(\-progress|p)$/] }
ARGV.delete(_progress) if _progress
progress = _progress

command = ARGV.join(' ')

help if command.empty?

puts %Q(:: Running "#{command}" for #{time || 'infinite'} seconds)

begin
	message = if progress
		"\e[4mLogging Stats, Ignoring Standard Output and Error\e[0m"
	else
		"\e[4mLogging Standard Output and Error\e[0m"
	end

	puts "\e[38;2;243;156;18m#{message.center(Sunburst.win_width + 6)}\e[0m"

	data = if progress
		if human_readable
			Sunburst.measure(command: command, time: time, sleep_time: 0.0001) { |exec_t, cpu_t, mem, threads, state, cpu_u|
				print "\e[2K:: "\
				"Exec T: #{"%05.2f" % exec_t}s | "\
				"CPU T: #{"%05.2f" % cpu_t}s | "\
				"Mem: #{convert_bytes(mem)} | "\
				"Threads: #{threads} | "\
				"State: #{state} | "\
				"CPU U: #{cpu_u}\r"
			}
		else
			Sunburst.measure(command: command, time: time, sleep_time: 0.0001) { |exec_t, cpu_t, mem, threads, state|
				print "\e[2K:: "\
				"Exec T: #{"%05.2f" % exec_t} | "\
				"CPU T: #{"%05.2f" % cpu_t} | "\
				"Mem: #{"%2d" % mem} | "\
				"Threads: #{threads} | "\
				"State: #{state} | "\
				"CPU U: #{cpu_u}\r"
			}
		end
	else
		Sunburst.measure(command: command, time: time, sleep_time: 0.0001)
	end

	print "\e[38;2;243;156;18m"
	splitter()
	print "\e[0m"

	exec_time = data[:execution_time]
	cpu_time = data[:cpu_time]
	percent_time = cpu_time.*(100).fdiv(exec_time)

	style = +"\e[1;"
	style << if percent_time > 75
		"38;2;230;80;70m"
	elsif percent_time > 50
		"38;2;45;125;255m"
	elsif percent_time > 25
		"38;2;255;225;0m"
	else
		"38;2;40;175;95m"
	end

	puts ":: Total Execution Time: #{data[:execution_time]} seconds\e[0m"
	puts ":: Total CPU Time: #{style}#{data[:cpu_time]}\e[0m second#{?s if data[:cpu_time] != 1} (#{percent_time.round(3)}% exec time)"

	mem = data[:memory]
	if mem
		percent_mem = mem.*(100).fdiv(Sunburst.total_ram)

		style = +"\e[1;"
		style << if percent_mem > 50
			"38;2;230;80;70m"
		elsif percent_mem > 30
			"38;2;45;125;255m"
		elsif percent_mem > 10
			"38;2;255;225;0m"
		else
			"38;2;40;175;95m"
		end

		if human_readable
			mem_text = convert_bytes(mem)

			puts ":: Memory Usage During Exit: #{style}#{mem_text}\e[0m (#{percent_mem.round(3)}% system mem)"
		else
			puts ":: Memory Usage During Exit: #{style}#{mem} bytes\e[0m (#{percent_mem.round(3)}% system mem)"
		end
	else
		puts ":: The memory Usage Can't be Logged."
	end

	avg_mem = data[:avg_mem]
	if avg_mem
		puts ":: Avg. Memory Usage: #{style}#{convert_bytes(avg_mem)}\e[0m (#{percent_mem.round(3)}% system mem)"
	else
		puts ":: The Average Memory Usage can't be Logged."
	end

	max_mem = data[:max_memory]
	if max_mem
		percent_mem = max_mem.*(100).fdiv(Sunburst.total_ram)

		style = +"\e[1;"
		style << if percent_mem > 50
			"38;2;230;80;70m"
		elsif percent_mem > 30
			"38;2;45;125;255m"
		elsif percent_mem > 10
			"38;2;255;225;0m"
		else
			"38;2;40;175;95m"
		end

		if human_readable
			mem_text = convert_bytes(max_mem)

			puts ":: Max Memory Usage: #{style}#{mem_text}\e[0m (#{percent_mem.round(3)}% system mem)"
		else
			puts ":: Max Memory Usage: #{style}#{max_mem} bytes\e[0m (#{percent_mem.round(3)}% system mem)"
		end
	else
		puts ":: The max memory Usage can't be logged."
	end

	avg_cpu_usage = data[:avg_cpu_usage]
	if avg_cpu_usage
		puts ":: Avg. CPU Usage: #{style}#{avg_cpu_usage}\e[0m"
	else
		puts ":: The Avg. CPU Usage Can't be Logged"
	end

	max_cpu_usage = data[:max_cpu_usage]
	if max_cpu_usage
		puts ":: Max CPU Usage: #{style}#{max_cpu_usage}\e[0m"
	else
		puts ":: The Max CPU Usage Can't be Logged"
	end

	max_threads = data[:max_threads]
	style = +"\e[1;"
	style << if max_threads > 16
		"38;2;230;80;70m"
	elsif max_threads > 8
		"38;2;45;125;255m"
	elsif max_threads > 4
		"38;2;255;225;0m"
	else
		"38;2;40;175;95m"
	end

	puts ":: Max Threads: #{style}#{max_threads}\e[0m"

rescue Errno::ENOENT
	puts "sunburst: #{command}: command not found"
	puts ?\n, ?- * Sunburst.win_width
rescue StandardError
	puts $!.full_message
end
